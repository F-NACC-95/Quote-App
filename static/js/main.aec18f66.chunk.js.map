{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","currentQuote","undefined","quoteFetcher","_callee","e","api_call","data","randomIndex","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","Math","floor","random","quotes","length","_this","setState","quote","currentAuthor","author","stop","this","react_default","createElement","className","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAqCeA,oNAhCbC,MAAQ,CACNC,kBAAcC,KAGhBC,mDAAe,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,MAAM,0IADhB,cACPT,EADOM,EAAAI,KAAAJ,EAAAE,KAAA,EAEMR,EAASW,OAFf,OAEPV,EAFOK,EAAAI,KAGK,EAClBR,EAAcU,KAAKC,MAAMD,KAAKE,SAAWb,EAAKc,OAAOC,QAGrDC,EAAKC,SAAS,CACZvB,aAAcM,EAAKc,OAAOb,GAAaiB,MACvCC,cAAenB,EAAKc,OAAOb,GAAamB,SAT7B,wBAAAf,EAAAgB,SAAAxB,EAAAyB,uIAcf,OACEC,EAAApB,EAAAqB,cAAA,OAAKC,UAAU,OACbF,EAAApB,EAAAqB,cAAA,OAAKC,UAAU,cACXF,EAAApB,EAAAqB,cAAA,UAAQE,QAASJ,KAAK1B,aAAc6B,UAAU,sBAA9C,aACCH,KAAK7B,MAAMC,cAAgB6B,EAAApB,EAAAqB,cAAA,KAAGC,UAAU,2BAAb,KAC3BH,KAAK7B,MAAMC,cAAgB6B,EAAApB,EAAAqB,cAAA,MAAIC,UAAU,kBAAkBH,KAAK7B,MAAMC,cACtE4B,KAAK7B,MAAMC,cAAgB6B,EAAApB,EAAAqB,cAAA,KAAGC,UAAU,4BAAb,KAC3BH,KAAK7B,MAAM0B,eAAiBI,EAAApB,EAAAqB,cAAA,MAAIC,UAAU,mBAAmBH,KAAK7B,MAAM0B,wBA1BjEQ,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOZ,EAAApB,EAAAqB,cAACY,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aec18f66.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./styles.css\";\n\nclass App extends React.Component {\n  state = {\n    currentQuote: undefined,\n    }\n\n  quoteFetcher = async (e) => {\n    const api_call = await fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json');\n    const data = await api_call.json();\n    let randomIndex = 0;\n    randomIndex = Math.floor(Math.random() * data.quotes.length);\n\n\n    this.setState({\n      currentQuote: data.quotes[randomIndex].quote,\n      currentAuthor: data.quotes[randomIndex].author,\n    })\n  }\n\nrender() {\n  return (\n    <div className=\"App\">\n      <div className=\"quote__box\">\n          <button onClick={this.quoteFetcher} className=\"new__quote__button\">New Quote</button>\n          {this.state.currentQuote && <p className=\"quote__quotations__left\">\"</p>}\n          {this.state.currentQuote && <h1 className=\"current__quote\">{this.state.currentQuote}</h1>}\n          {this.state.currentQuote && <p className=\"quote__quotations__right\">\"</p>}\n          {this.state.currentAuthor && <h1 className=\"current__author\">{this.state.currentAuthor}</h1>}\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}